Performing aggregation operations in MongoDB
Aggregation:Aggregation is a way of processing a large number of documents in a collection by means of passing them through different stages. 
The stages make up what is known as a pipeline. The stages in a pipeline can filter, sort, group, reshape and modify documents that pass through the pipeline.
One of the most common use cases of Aggregation is to calculate aggregate values for groups of documents. 
This is similar to the basic aggregation available in SQL with the GROUP BY clause and COUNT, SUM and AVG functions.

To perform aggregation operations, we can use:
	Aggregation pipelines,which are the preferred method for performing aggregations.
	Single purpose aggregation methods,which are simple but lack the capabilities of an aggregation pipeline.

MongoDB Aggregation Pipelines:The pipeline consists of the following stages
	
	Input-->$match-->$group-->$sort-->ouput

	$match stage – filters those documents we need to work with, those that fit our needs
	$group stage – does the aggregation job
	$sort  stage – sorts the resulting documents the way we require (ascending or descending)
Syntax:
	db.collectionName.aggregate(pipeline, options)
collectionName – is the name of a collection,
pipeline – is an array that contains the aggregation stages,
options – optional parameters for the aggregation 
Example:
	pipeline = [
        	{ $match : { … } },
        	{ $group : { … } },
        	{ $sort : { … } }
       		]
*********Create and use Collection universities*****************
{
  country : 'Spain',
  city : 'Salamanca',
  name : 'USAL',
  location : {
    type : 'Point',
    coordinates : [ -5.6722512,17, 40.9607792 ]
  },
{
  students : [
    		{ year : 2014, number : 24774 },
    		{ year : 2015, number : 23166 },
    		{ year : 2016, number : 21913 },
    		{ year : 2017, number : 21715 }
  	]
},
{
  country : 'Spain',
  city : 'Salamanca',
  name : 'UPSA',
  location : {
    type : 'Point',
    coordinates : [ -5.6691191,17, 40.9631732 ]
  },
  students : [
    { year : 2014, number : 4788 },
    { year : 2015, number : 4821 },
    { year : 2016, number : 6550 },
    { year : 2017, number : 6125 },
  ]
}

db.universities.insert([
{
  country : 'Spain',
  city : 'Salamanca',
  name : 'USAL',
  location : {
    type : 'Point',
    coordinates : [ -5.6722512,17, 40.9607792 ]
  },
  students : [
    { year : 2014, number : 24774 },
    { year : 2015, number : 23166 },
    { year : 2016, number : 21913 },
    { year : 2017, number : 21715 }
  ]
},
{
  country : 'Spain',
  city : 'Salamanca',
  name : 'UPSA',
  location : {
    type : 'Point',
    coordinates : [ -5.6691191,17, 40.9631732 ]
  },
  students : [
    { year : 2014, number : 4788 },
    { year : 2015, number : 4821 },
    { year : 2016, number : 6550 },
    { year : 2017, number : 6125 }
  ]
}
])

Create and use Courses collection
use courses
{
  university : 'USAL',
  name : 'Computer Science',
  level : 'Excellent'
}
{
  university : 'USAL',
  name : 'Electronics',
  level : 'Intermediate'
}
{
  university : 'USAL',
  name : 'Communication',
  level : 'Excellent'
}
db.courses.insert([
{
  university : 'USAL',
  name : 'Computer Science',
  level : 'Excellent'
},
{
  university : 'USAL',
  name : 'Electronics',
  level : 'Intermediate'
},
{
  university : 'USAL',
  name : 'Communication',
  level : 'Excellent'
}
])
***************Aggregate OPerations***************
MongoDB $match:
db.universities.aggregate([
  { $match : { country : 'Spain', city : 'Salamanca' } }
]).pretty()

MongoDB $project:
db.universities.aggregate([
  { $project : { _id : 0, country : 1, city : 1, name : 1 } }
]).pretty()

MongoDB $group:
db.universities.aggregate([
  { $group : { _id : '$name', totaldocs : { $sum : 1 } } }
]).pretty()
 

